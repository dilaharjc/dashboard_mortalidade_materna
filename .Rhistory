sliderInput("intervalo_anos", "Selecione o Intervalo de Anos:",
min = min(dados_mortalidade_materna$ano),
max = max(dados_mortalidade_materna$ano),
value = c(min(dados_mortalidade_materna$ano), max(dados_mortalidade_materna$ano)))
)
),
fluidRow(
box(
title = "Série Temporal de Indicadores",
status = "info",
width = 12, # Ocupa toda a largura
solidHeader = TRUE,
plotlyOutput("grafico_serie_temporal", height = 500) # Altura fixa para o gráfico
)
)
),
# Tab: Mapas e Ranking
tabItem(
tabName = "Mapas",
h1("Mapa de Mortalidade Materna por Capital"),
fluidRow(
box(
title = "Filtros do Mapa",
status = "primary",
width = 12, # Ocupa toda a largura
solidHeader = TRUE,
selectInput("ano_mapa", "Selecione o Ano:", choices = unique(dados_mortalidade_materna$ano)),
selectInput("capital_mapa", "Selecione a Capital:", choices = unique(dados_mortalidade_materna$capital)),
selectInput("tipo_informacao", "Selecione o Tipo de Informação:",
choices = c("Óbitos Maternos" = "obitos_maternos",
"Gastos em Saúde (R$)" = "despesas_gastos_saude",
"Cobertura Vacinal (%)" = "cobertura_vacinal",
"IDH" = "idh",
"Mortalidade Obstétrica Total" = "mort_total"))
)
),
fluidRow(
column(
width = 6, # Metade da tela
box(
title = "Mapa Interativo",
status = "success",
solidHeader = TRUE,
leafletOutput("mapa_interativo", height = 500)
)
),
column(
width = 6, # Metade da tela
box(
title = "Ranking das 10 Maiores Capitais",
status = "warning",
solidHeader = TRUE,
tableOutput("ranking_mortalidade")
)
)
)
),
# Tab: Informações
tabItem(
tabName = "Info",
h1("Informações Gerais")
)
)
)
)
# Server
server <- function(input, output) {
# Filtro dinâmico dos dados
dados_filtrados <- reactive({
dados <- dados_mortalidade_materna %>%
filter(ano >= input$intervalo_anos[1] & ano <= input$intervalo_anos[2])
if (input$capital_selecionada != "Todas") {
dados <- dados %>% filter(capital == input$capital_selecionada)
}
return(dados)
})
# Botões: Total de Óbitos
output$total_obitos <- renderInfoBox({
total <- sum(dados_filtrados()$obitos_maternos, na.rm = TRUE)
infoBox("Total de Óbitos Maternos", total, icon = icon("heartbeat"), color = "red")
})
# Botões: Totais de Despesas
output$totais_despesas <- renderInfoBox({
total <- sum(dados_filtrados()$despesas_gastos_saude, na.rm = TRUE)
infoBox("Total de Gastos em Saúde/População (R$)", round(total, 2), icon = icon("usd"), color = "blue")
})
# Botões: Cobertura Vacinal
output$cobertura_vacinal <- renderInfoBox({
media <- mean(dados_filtrados()$cobertura_vacinal, na.rm = TRUE)
infoBox("Cobertura Vacinal Média (%)", round(media, 2), icon = icon("medkit"), color = "green")
})
# Gráfico: Série Temporal de Indicadores
output$grafico_serie_temporal <- renderPlotly({
dados <- dados_filtrados() %>%
group_by(ano) %>%
summarise(
obitos_maternos = sum(obitos_maternos),
cobertura_vacinal = mean(cobertura_vacinal, na.rm = TRUE),
mort_obst_direta = sum(mort_materna_obst_direta),
mort_obst_indireta = sum(mort_materna_obst_indireta),
despesas_saude = mean(despesas_gastos_saude, na.rm = TRUE)
)
ggplotly(
ggplot(dados, aes(x = ano)) +
geom_line(aes(y = obitos_maternos, color = "Óbitos Maternos"), size = 1) +
geom_line(aes(y = cobertura_vacinal, color = "Cobertura Vacinal"), size = 1) +
geom_line(aes(y = mort_obst_direta, color = "Mortalidade Obstétrica Direta"), size = 1) +
geom_line(aes(y = mort_obst_indireta, color = "Mortalidade Obstétrica Indireta"), size = 1) +
geom_line(aes(y = despesas_saude, color = "Despesas em Saúde"), size = 1) +
labs(title = "Série Temporal de Indicadores", x = "Ano", y = "Valores") +
scale_color_manual(values = c(
"Óbitos Maternos" = "red",
"Cobertura Vacinal" = "blue",
"Mortalidade Obstétrica Direta" = "green",
"Mortalidade Obstétrica Indireta" = "orange",
"Despesas em Saúde" = "purple"
)) +
theme_minimal() +
theme(legend.position = "bottom")
)
})
# Mapa: Mortalidade Materna por Capital
output$mapa_interativo <- renderLeaflet({
# Filtra os dados pelo ano e tipo de informação
filtered_data <- dados_mortalidade_materna_sf %>%
filter(ano == input$ano_mapa)
# Calcula a coluna de mortalidade obstétrica total
filtered_data$mort_total <- filtered_data$mort_materna_obst_direta + filtered_data$mort_materna_obst_indireta
# Seleciona a coluna de interesse
coluna_selecionada <- input$tipo_informacao
# Define a paleta de cores
pal <- colorNumeric(palette = "Reds", domain = filtered_data[[coluna_selecionada]])
# Encontra a localização da capital selecionada
if (!is.null(input$capital_mapa)) {
capital_selecionada <- filtered_data %>% filter(capital == input$capital_mapa)
} else {
capital_selecionada <- NULL
}
# Cria o mapa
leaflet(data = filtered_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(filtered_data[[coluna_selecionada]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = paste("Capital:", filtered_data$capital,
"<br>Valor:", filtered_data[[coluna_selecionada]])
) %>%
addLegend(pal = pal, values = ~filtered_data[[coluna_selecionada]], title = input$tipo_informacao) %>%
setView(lng = ifelse(is.null(capital_selecionada), -55, st_coordinates(st_centroid(capital_selecionada$geom))[1]),
lat = ifelse(is.null(capital_selecionada), -15, st_coordinates(st_centroid(capital_selecionada$geom))[2]),
zoom = ifelse(is.null(capital_selecionada), 4, 8))
})
# Tabela: Ranking de Mortalidade Materna
output$ranking_mortalidade <- renderTable({
# Calcula a coluna de mortalidade obstétrica total se necessário
dados_mortalidade_materna <- dados_mortalidade_materna %>%
mutate(mort_total = mort_materna_obst_direta + mort_materna_obst_indireta)
dados_mortalidade_materna %>%
filter(ano == input$ano_mapa) %>%
group_by(capital) %>%
summarise(valor = sum(.data[[input$tipo_informacao]], na.rm = TRUE)) %>%
arrange(desc(valor)) %>%
slice_head(n = 10) # Mostra apenas as 10 maiores capitais
})
}
# Executar o app
shinyApp(ui, server)
runApp()
runApp()
runApp()
library(DT)
runApp()
# Gerando o dashboard
# UI
ui <- dashboardPage(
skin = "yellow",
dashboardHeader(
title = "Dashboard Mortalidade Materna",
titleWidth = 340
),
dashboardSidebar(
sidebarMenu(
menuItem("Série Histórica", tabName = "Graficos", icon = icon("stats", lib = "glyphicon")),
menuItem("Mapas e Ranking", tabName = "Mapas", icon = icon("globe", lib = "glyphicon")),
menuItem("Informações", tabName = "Info", icon = icon("info-sign", lib = "glyphicon"))
)
),
dashboardBody(
tabItems(
# Tab: Gráficos
tabItem(
tabName = "Graficos",
h1("Panorama de Mortalidade Materna nas Capitais do Brasil (2017 a 2022)"),
fluidRow(
infoBoxOutput("total_obitos"),
infoBoxOutput("totais_despesas"),
infoBoxOutput("cobertura_vacinal")
),
fluidRow(
box(
title = "Filtros",
status = "primary",
width = 12, # Ocupa toda a largura
solidHeader = TRUE,
selectInput("capital_selecionada", "Selecione a Capital:", choices = c("Todas", unique(dados_mortalidade_materna$capital))),
sliderInput("intervalo_anos", "Selecione o Intervalo de Anos:",
min = min(dados_mortalidade_materna$ano),
max = max(dados_mortalidade_materna$ano),
value = c(min(dados_mortalidade_materna$ano), max(dados_mortalidade_materna$ano)))
)
),
fluidRow(
box(
title = "Série Temporal de Indicadores",
status = "info",
width = 12, # Ocupa toda a largura
solidHeader = TRUE,
plotlyOutput("grafico_serie_temporal", height = 500) # Altura fixa para o gráfico
)
)
),
# Tab: Mapas e Ranking
tabItem(
tabName = "Mapas",
h1("Mapa e Ranking de Mortalidade Materna Anual por Capital"),
fluidRow(
column(
width = 8, # Filtro ocupa 8 colunas
box(
title = "Filtros do Mapa",
status = "primary",
solidHeader = TRUE,
selectInput("ano_mapa", "Selecione o Ano:", choices = unique(dados_mortalidade_materna$ano)),
selectInput("capital_mapa", "Selecione a Capital:", choices = unique(dados_mortalidade_materna$capital)),
selectInput("tipo_informacao", "Selecione o Tipo de Informação:",
choices = c("Óbitos Maternos" = "obitos_maternos",
"Gastos em Saúde (R$)" = "despesas_gastos_saude",
"Cobertura Vacinal (%)" = "cobertura_vacinal",
"IDH" = "idh",
"Mortalidade Obstétrica Total" = "mort_total"))
)
),
column(
width = 4, # Tabela ocupa 4 colunas
box(
title = "Ranking das 10 Maiores Capitais",
status = "warning",
solidHeader = TRUE,
DTOutput("ranking_mortalidade") # Tabela interativa com DT
)
)
),
fluidRow(
box(
title = "Mapa Interativo",
status = "success",
width = 12, # Mapa ocupa toda a largura
solidHeader = TRUE,
leafletOutput("mapa_interativo", height = 500) # Altura fixa para o mapa
)
)
),
# Tab: Informações
tabItem(
tabName = "Info",
h1("Informações Gerais")
)
)
)
)
# Server
server <- function(input, output) {
# Filtro dinâmico dos dados
dados_filtrados <- reactive({
dados <- dados_mortalidade_materna %>%
filter(ano >= input$intervalo_anos[1] & ano <= input$intervalo_anos[2])
if (input$capital_selecionada != "Todas") {
dados <- dados %>% filter(capital == input$capital_selecionada)
}
return(dados)
})
# Botões: Total de Óbitos
output$total_obitos <- renderInfoBox({
total <- sum(dados_filtrados()$obitos_maternos, na.rm = TRUE)
infoBox("Total de Óbitos Maternos", total, icon = icon("heartbeat"), color = "red")
})
# Botões: Totais de Despesas
output$totais_despesas <- renderInfoBox({
total <- sum(dados_filtrados()$despesas_gastos_saude, na.rm = TRUE)
infoBox("Total de Gastos em Saúde/População (R$)", round(total, 2), icon = icon("usd"), color = "blue")
})
# Botões: Cobertura Vacinal
output$cobertura_vacinal <- renderInfoBox({
media <- mean(dados_filtrados()$cobertura_vacinal, na.rm = TRUE)
infoBox("Cobertura Vacinal Média (%)", round(media, 2), icon = icon("medkit"), color = "green")
})
# Gráfico: Série Temporal de Indicadores
output$grafico_serie_temporal <- renderPlotly({
dados <- dados_filtrados() %>%
group_by(ano) %>%
summarise(
obitos_maternos = sum(obitos_maternos),
cobertura_vacinal = mean(cobertura_vacinal, na.rm = TRUE),
mort_obst_direta = sum(mort_materna_obst_direta),
mort_obst_indireta = sum(mort_materna_obst_indireta),
despesas_saude = mean(despesas_gastos_saude, na.rm = TRUE)
)
ggplotly(
ggplot(dados, aes(x = ano)) +
geom_line(aes(y = obitos_maternos, color = "Óbitos Maternos"), size = 1) +
geom_line(aes(y = cobertura_vacinal, color = "Cobertura Vacinal"), size = 1) +
geom_line(aes(y = mort_obst_direta, color = "Mortalidade Obstétrica Direta"), size = 1) +
geom_line(aes(y = mort_obst_indireta, color = "Mortalidade Obstétrica Indireta"), size = 1) +
geom_line(aes(y = despesas_saude, color = "Despesas em Saúde"), size = 1) +
labs(title = "Série Temporal de Indicadores", x = "Ano", y = "Valores") +
scale_color_manual(values = c(
"Óbitos Maternos" = "red",
"Cobertura Vacinal" = "blue",
"Mortalidade Obstétrica Direta" = "green",
"Mortalidade Obstétrica Indireta" = "orange",
"Despesas em Saúde" = "purple"
)) +
theme_minimal() +
theme(legend.position = "bottom")
)
})
# Mapa: Mortalidade Materna por Capital
output$mapa_interativo <- renderLeaflet({
# Filtra os dados pelo ano e tipo de informação
filtered_data <- dados_mortalidade_materna_sf %>%
filter(ano == input$ano_mapa)
# Calcula a coluna de mortalidade obstétrica total
filtered_data$mort_total <- filtered_data$mort_materna_obst_direta + filtered_data$mort_materna_obst_indireta
# Seleciona a coluna de interesse
coluna_selecionada <- input$tipo_informacao
# Define a paleta de cores
pal <- colorNumeric(palette = "Reds", domain = filtered_data[[coluna_selecionada]])
# Encontra a localização da capital selecionada
if (!is.null(input$capital_mapa)) {
capital_selecionada <- filtered_data %>% filter(capital == input$capital_mapa)
} else {
capital_selecionada <- NULL
}
# Cria o mapa
leaflet(data = filtered_data) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(filtered_data[[coluna_selecionada]]),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
popup = paste("Capital:", filtered_data$capital,
"<br>Valor:", filtered_data[[coluna_selecionada]])
) %>%
addLegend(pal = pal, values = ~filtered_data[[coluna_selecionada]], title = input$tipo_informacao) %>%
setView(lng = ifelse(is.null(capital_selecionada), -55, st_coordinates(st_centroid(capital_selecionada$geom))[1]),
lat = ifelse(is.null(capital_selecionada), -15, st_coordinates(st_centroid(capital_selecionada$geom))[2]),
zoom = ifelse(is.null(capital_selecionada), 4, 8))
})
# Tabela: Ranking de Mortalidade Materna (Usando DT)
output$ranking_mortalidade <- renderDT({
# Calcula a coluna de mortalidade obstétrica total se necessário
dados_mortalidade_materna <- dados_mortalidade_materna %>%
mutate(mort_total = mort_materna_obst_direta + mort_materna_obst_indireta)
ranking <- dados_mortalidade_materna %>%
filter(ano == input$ano_mapa) %>%
group_by(capital) %>%
summarise(valor = sum(.data[[input$tipo_informacao]], na.rm = TRUE)) %>%
arrange(desc(valor)) %>%
slice_head(n = 10) # Mostra apenas as 10 maiores capitais
# Renderiza a tabela com estilo elegante
datatable(
ranking,
options = list(
pageLength = 10, # Número de linhas por página
autoWidth = TRUE,
dom = 't', # Remove controles extras (apenas tabela)
ordering = TRUE, # Habilita ordenação
searching = FALSE # Desabilita barra de busca
),
rownames = FALSE, # Remove números de linha
colnames = c("Capital", "Valor"), # Renomeia colunas
class = "display compact hover cell-border stripe order-column"
)
})
}
# Executar o app
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
# Gerando o dashboard
# UI
ui <- dashboardPage(
skin = "yellow",
dashboardHeader(
title = "Dashboard Mortalidade Materna",
titleWidth = 340
),
dashboardSidebar(
sidebarMenu(
menuItem("Série Histórica", tabName = "Graficos", icon = icon("stats", lib = "glyphicon")),
menuItem("Mapas e Ranking", tabName = "Mapas", icon = icon("globe", lib = "glyphicon")),
menuItem("Informações", tabName = "Info", icon = icon("info-sign", lib = "glyphicon"))
)
),
dashboardBody(
tabItems(
# Tab: Gráficos
tabItem(
tabName = "Graficos",
h1("Panorama de Mortalidade Materna nas Capitais do Brasil (2017 a 2022)"),
fluidRow(
infoBoxOutput("total_obitos"),
infoBoxOutput("totais_despesas"),
infoBoxOutput("cobertura_vacinal")
),
fluidRow(
box(
title = "Filtros",
status = "primary",
width = 12, # Ocupa toda a largura
solidHeader = TRUE,
selectInput("capital_selecionada", "Selecione a Capital:", choices = c("Todas", unique(dados_mortalidade_materna$capital))),
sliderInput("intervalo_anos", "Selecione o Intervalo de Anos:",
min = min(dados_mortalidade_materna$ano),
max = max(dados_mortalidade_materna$ano),
value = c(min(dados_mortalidade_materna$ano), max(dados_mortalidade_materna$ano)))
)
),
fluidRow(
box(
title = "Série Temporal de Indicadores",
status = "info",
width = 12, # Ocupa toda a largura
solidHeader = TRUE,
plotlyOutput("grafico_serie_temporal", height = 500) # Altura fixa para o gráfico
)
)
),
# Tab: Mapas e Ranking
tabItem(
tabName = "Mapas",
h1("Mapa e Ranking de Mortalidade Materna Anual por Capital"),
fluidRow(
column(
width = 12, # Filtro ocupa 8 colunas
box(
title = "Filtros do Mapa",
status = "primary",
solidHeader = TRUE,
selectInput("ano_mapa", "Selecione o Ano:", choices = unique(dados_mortalidade_materna$ano)),
selectInput("capital_mapa", "Selecione a Capital:", choices = unique(dados_mortalidade_materna$capital)),
selectInput("tipo_informacao", "Selecione o Tipo de Informação:",
choices = c("Óbitos Maternos" = "obitos_maternos",
"Gastos em Saúde (R$)" = "despesas_gastos_saude",
"Cobertura Vacinal (%)" = "cobertura_vacinal",
"IDH" = "idh",
"Mortalidade Obstétrica Total" = "mort_total"))
)
)
),
fluidRow(
column(
width = 12, # Tabela ocupa 4 colunas
box(
title = "Ranking das 10 Maiores Capitais",
status = "warning",
solidHeader = TRUE,
DTOutput("ranking_mortalidade") # Tabela interativa com DT
)
)
)
),
fluidRow(
box(
title = "Mapa Interativo",
status = "success",
width = 12, # Mapa ocupa toda a largura
solidHeader = TRUE,
leafletOutput("mapa_interativo", height = 500) # Altura fixa para o mapa
)
)
),
# Tab: Informações
tabItem(
tabName = "Info",
h1("Informações Gerais")
)
)
)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
